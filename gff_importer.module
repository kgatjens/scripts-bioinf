

<?php
/**
 * Implements hook_webform_submission_presave()
 *
 * Edit some webform form values before saving to database.
 * This will import a *.gff file, parse it and creates node depending of his info
 * @see http://api.drupalize.me/api/drupal/function/hook_webform_submission_presave/6
 */
function gff_importer_webform_submission_presave($node, &$submission) {
  
  $fileInfo = file_load($_POST['submitted']['file']['fid']);

  $filepath = drupal_realpath($fileInfo->uri);

  $file = fopen($filepath, "r") or die("Unable to open file!");

  $contig_array = array();
  $size_seq_line = 61;//****
  $i = 0;

  //temporal
  //delete nodes // clean DB
   $result= db_query("SELECT nid FROM {node} AS n WHERE n.type = 'gff-content-type-1'");
   foreach ($result as $record) {
     node_delete($record->nid);
   }

  //main data array formater
  while(!feof($file)) {
     $line = fgets($file);
     if(substr($line,0,2) !== '##' ){
      
       $pieces = explode("\t", $line);
      
        if(count($pieces)>1){
          foreach ($pieces as $key => $value) {
          $clean_array[$i]['contig']['name']  = $pieces[0];
          $clean_array[$i]['contig']['start'] = $pieces[3];
          $clean_array[$i]['contig']['end']   = $pieces[4];         
          if(preg_match('/;/',$value)){
              
              $attributes = explode(";", $value);

              foreach ($attributes as $attri_key => $attri_value) {
                $clean_array[$i]['attributes'][]= $attri_value; 
              }

            }else{
              //$clean_array[$i][]= $value; 
            }

          } 
        }else{
          //Format the sequense
          if(strlen($line) != $size_seq_line){//currently dependding from the seq size
            $seq_name = str_replace(">","",str_replace("\n","",$line)) ;
            
          }else{
            $clean_array['seq'][$seq_name] = isset($clean_array['seq'][$seq_name]) ? $clean_array['seq'][$seq_name].str_replace("\n","",$line) : ''; 
          }
        }   
        $i++;
     }else{

     }
  }

  //creates an array with the sequenses
  $sequenses = $clean_array['seq'];
  unset($clean_array['seq']);

  //loop for sequense distribution depending of positions
  global $user;

  gff_importer_create_gff_content_type();

  foreach ($clean_array as $key => $value) {
      
    $contig = $value['contig']['name'];
    
    $startIndex = $value['contig']['start'];
    
    $length = abs($startIndex - $value['contig']['end']);

    $clean_array[$key]['contig']['fragment'] = substr($sequenses[$contig], $startIndex, $length); 

    $node = new stdClass();
    $node->title = $value['contig']['name'];
    $node->type = "gff-content-type-1";//sequenses
    node_object_prepare($node);
    $node->uid = $user->uid; 
    $node->status = 1; //(1 or 0): published or not
    $node->promote = 0; //(1 or 0): promoted to front page
    $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write 

    // $node = node_submit($node); // Prepare node for saving
    // node_save($node);
  }
  fclose($file);


}

/**
 * Creates the sequense content type if not isset
 *
 * 
 * 
 * @see 
 */
function gff_importer_create_gff_content_type(){

  $contentTypes = node_type_get_types();

  if(!isset($contentTypes['sequenses'])){

     $type = array(
        'type' => 'sequense',
        'name' => st('Sequense'),
        'base' => 'node_content',
        'description' => st("Tipo de contenido secuencia, la cual tiene informaciÃ³n propia del fragmento relativo a una cepa"),
        'custom' => 1,
        'modified' => 1,
        'locked' => 0,
      );  

      // $type = node_type_set_defaults($type);
      // node_type_save($types;
      // node_add_body_field($type);   

     $contig_name = array(
        'field_name'  = 'contig_name',
        'description' = 'Nombre del contig o fragmento de la secuencia',
        'label'       = 'Nombre de contig/fragmento de secuencia',
        'type'        = 'textfield',
      );

     gff_importer_create_sequense_field($contig_name);

     $contig_name = array(
        'field_name'  = 'fragment_start',
        'description' = '',
        'label'       = '',
        'type'        = 'textfield',
      );

     gff_importer_create_sequense_field($contig_name);

     $contig_name = array(
        'field_name'  = 'fragment_end',
        'description' = '',
        'label'       = '',
        'type'        = 'textfield',
      );

     $contig_name = array(
        'field_name'  = 'fragment',
        'description' = '',
        'label'       = '',
        'type'        = 'textfield',
      );

     $contig_name = array(
        'field_name'  = 'fragment_start',
        'description' = '',
        'label'       = '',
        'type'        = 'textfield',
      );



  }
}

/**
 * Creates fields for content type *sequense* if not isset
 *
 * 
 * 
 * @see 
 */
function gff_importer_create_sequense_field($field = array()){

  //  Verify the field does not already exist.
  if ( field_info_field( $field['field_name'] ) ) {
      return;
  }

  $instance = array(
    'field_name' => $field[ 'field_name' ],
    'entity_type' => 'node',
    'bundle' => 'sequense',
    'description' => $field['description'],
    'label' => $field['label'],
    'widget' => array(
        'type' => $field['type'],
    ),
  );

}


  

  exit;
}